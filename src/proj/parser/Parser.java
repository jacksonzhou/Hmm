/* Generated By:JavaCC: Do not edit this line. Parser.java */
package proj.parser;

import java.io.*;
import java.util.*;
import static proj.AbstractSyntax.*;
import proj.AbstractSyntax;

public class Parser implements ParserConstants {

    private Type   curTopLevelType;
    private Token  curTopLevelToken;

// We are generously allowing the global variables to live.
// Even though they deserve to DIE!
  final public Program Program() throws ParseException {
 List<Declaration> globals = new ArrayList<Declaration>();
 List<Declaration> decList;
 List<Function> funcList = new ArrayList<Function>();
 List<MyClass> classList = new ArrayList<MyClass>();
 List<MyObject> objList = new ArrayList<MyObject>();
 Function f; Token t; MyClass c; MyObject o;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case BOOL:
      case VOID:
      case LIST:
      case TUPLE:
      case OBJECT:
      case STRING:
      case LPAREN:
      case MYCLASS:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case BOOL:
      case VOID:
      case LIST:
      case TUPLE:
      case OBJECT:
      case STRING:
      case LPAREN:
        curTopLevelType = retType();
        curTopLevelToken = jj_consume_token(IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMI:
        case EQUALS:
        case COMMA:
          decList = restOfGlobalDec();
                                         globals.addAll(decList);
          break;
        case LPAREN:
          f = restOfFunction();
                                          funcList.add(f);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case MYCLASS:
        c = myClass();
                        classList.add(c);
        break;
      case IDENTIFIER:
        o = obj();
                    objList.add(o);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return new Program(globals, funcList, classList, objList);}
    throw new Error("Missing return statement in function");
  }

  final public MyClass myClass() throws ParseException {
  Constructor cons; List<Declaration> globals = new ArrayList<Declaration>(); List<Declaration> decList; List<Function> funcList = new ArrayList<Function>();Token className; Function f;
    jj_consume_token(MYCLASS);
    className = jj_consume_token(IDENTIFIER);
    jj_consume_token(LCURLY);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case BOOL:
      case VOID:
      case LIST:
      case TUPLE:
      case OBJECT:
      case STRING:
      case LPAREN:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      curTopLevelType = retType();
      curTopLevelToken = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
      case EQUALS:
      case COMMA:
        decList = restOfGlobalDec();
                                         globals.addAll(decList);
        break;
      case LPAREN:
        f = restOfFunction();
                                          funcList.add(f);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    cons = constructor();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case BOOL:
      case VOID:
      case LIST:
      case TUPLE:
      case OBJECT:
      case STRING:
      case LPAREN:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
      curTopLevelType = retType();
      curTopLevelToken = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMI:
      case EQUALS:
      case COMMA:
        decList = restOfGlobalDec();
                                         globals.addAll(decList);
        break;
      case LPAREN:
        f = restOfFunction();
                                          funcList.add(f);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RCURLY);
     {if (true) return new MyClass(className, globals, funcList, cons);}
    throw new Error("Missing return statement in function");
  }

  final public Constructor constructor() throws ParseException {
  Token consName; Declaration d; Block b; List<Declaration> args = new ArrayList<Declaration>();
    consName = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case BOOL:
    case LIST:
    case TUPLE:
    case OBJECT:
    case STRING:
    case LPAREN:
      d = parameter();
                     args.add(d);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        d = parameter();
                                                             args.add(d);
      }
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    b = block();
  {if (true) return new Constructor(consName, args, b);}
    throw new Error("Missing return statement in function");
  }

/*
*  added by MST
*  recognizes the syntax for instantiating an object of a class
*/
  final public MyObject obj() throws ParseException {
 Token myObjName; Token className; List<Expression> args = new ArrayList<Expression>();
    className = jj_consume_token(IDENTIFIER);
    myObjName = jj_consume_token(IDENTIFIER);
    jj_consume_token(EQUALS);
    jj_consume_token(CREATE);
    jj_consume_token(IDENTIFIER);
    // need to ensure that the className = identifier after create
      args = callArgs();
    {if (true) return new MyObject(myObjName, className, args);}
    throw new Error("Missing return statement in function");
  }

/*
* added by MST
* recongizes the syntax for calling a method of a class, using an instance of a class
*/
  final public ObjFunction objFunc() throws ParseException {
 Token className; Token myObjName; List<Expression> args = new ArrayList<Expression>(); Token objFunName;
    className = jj_consume_token(IDENTIFIER);
    jj_consume_token(DOT);
    myObjName = jj_consume_token(IDENTIFIER);
    jj_consume_token(DOT);
    objFunName = jj_consume_token(IDENTIFIER);
    args = callArgs();
   {if (true) return new ObjFunction(className, myObjName, objFunName, args);}
    throw new Error("Missing return statement in function");
  }

  final public Function restOfFunction() throws ParseException {
  Declaration d; Block b; List<Declaration> args = new ArrayList<Declaration>();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case BOOL:
    case LIST:
    case TUPLE:
    case OBJECT:
    case STRING:
    case LPAREN:
      d = parameter();
                            args.add(d);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        d = parameter();
                                                                    args.add(d);
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    b = block();
                {if (true) return new Function(curTopLevelType, curTopLevelToken, args, b);}
    throw new Error("Missing return statement in function");
  }

  final public List<Declaration> restOfGlobalDec() throws ParseException {
 Expression e, firstOne = null; Token id; List<Declaration> decls = new ArrayList<Declaration>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      firstOne = expression();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
                  decls.add(new Declaration(curTopLevelType, curTopLevelToken, firstOne));
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMMA);
      id = jj_consume_token(IDENTIFIER);
            e = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        e = expression();
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
           decls.add(new Declaration(curTopLevelType, id, e));
    }
    jj_consume_token(SEMI);
                {if (true) return decls;}
    throw new Error("Missing return statement in function");
  }

  final public Declaration parameter() throws ParseException {
  Type t; Token id ;
    t = varType();
    id = jj_consume_token(IDENTIFIER);
                                     {if (true) return new Declaration(t, id, null);}
    throw new Error("Missing return statement in function");
  }

  final public List<Declaration> declaration() throws ParseException {
  Type t; Declaration d; List<Declaration> result = new ArrayList<Declaration>();
    t = varType();
    d = singleVarDeclaration(t);
                                 result.add(d);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      d = singleVarDeclaration(t);
                                          result.add(d);
    }
       {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Declaration singleVarDeclaration(Type type) throws ParseException {
  Token id; Expression initValue = null;
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      initValue = expression();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
                {if (true) return new Declaration(type, id, initValue);}
    throw new Error("Missing return statement in function");
  }

/**
 * The return type is either a Variable type or 'void'
 */
  final public Type retType() throws ParseException {
  Type t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
                          {if (true) return BaseType.VOID;}
      break;
    case INT:
    case FLOAT:
    case BOOL:
    case LIST:
    case TUPLE:
    case OBJECT:
    case STRING:
    case LPAREN:
      t = varType();
                          {if (true) return t;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/**
 * A type that can be assigned to a variable.
 */
  final public Type varType() throws ParseException {
 Type t; List<Type> argTypes = new ArrayList<Type>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case BOOL:
    case LIST:
    case TUPLE:
    case OBJECT:
    case STRING:
      t = varBaseType();
                              {if (true) return t;}
      break;
    default:
      jj_la1[17] = jj_gen;
      if (jj_2_3(3)) {
        jj_consume_token(LPAREN);
        label_8:
        while (true) {
          if (jj_2_1(2)) {
            ;
          } else {
            break label_8;
          }
          t = varType();
          jj_consume_token(COMMA);
                                                                     argTypes.add(t);
        }
        t = retType();
        jj_consume_token(RPAREN);
                                                                                                                  {if (true) return new FunctionType(argTypes, t);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          label_9:
          while (true) {
            if (jj_2_2(2)) {
              ;
            } else {
              break label_9;
            }
            t = varType();
            jj_consume_token(MAP_TO);
                                                         argTypes.add(t);
          }
          t = retType();
          jj_consume_token(RPAREN);
                                                                                                       {if (true) return new FunctionType(argTypes, t, false);}
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * A Base Type, except for the 'void'
 */
  final public Type varBaseType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
               {if (true) return BaseType.INT;}
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
               {if (true) return BaseType.FLOAT;}
      break;
    case BOOL:
      jj_consume_token(BOOL);
               {if (true) return BaseType.BOOL;}
      break;
    case LIST:
      jj_consume_token(LIST);
               {if (true) return BaseType.LIST;}
      break;
    case TUPLE:
      jj_consume_token(TUPLE);
               {if (true) return BaseType.TUPLE;}
      break;
    case OBJECT:
      jj_consume_token(OBJECT);
               {if (true) return BaseType.OBJECT;}
      break;
    case STRING:
      jj_consume_token(STRING);
               {if (true) return BaseType.STRING;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Statement> statements() throws ParseException {
  Statement s; List<Statement> statements = new ArrayList<Statement>();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case WHILE:
      case FOR:
      case INT:
      case FLOAT:
      case BOOL:
      case LIST:
      case TUPLE:
      case OBJECT:
      case STRING:
      case RETURN:
      case LPAREN:
      case LCURLY:
      case SEMI:
      case LAMBDA:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_10;
      }
      s = statement();
                       if (s != null) { statements.add(s);}
    }
                                                                   {if (true) return statements;}
    throw new Error("Missing return statement in function");
  }

  final public Statement statement() throws ParseException {
  Statement s; List<Declaration> decls;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
                               {if (true) return null;}
      break;
    case INT:
    case FLOAT:
    case BOOL:
    case LIST:
    case TUPLE:
    case OBJECT:
    case STRING:
    case LPAREN:
      decls = declaration();
                               {if (true) return new DeclContainer(decls);}
      break;
    case LCURLY:
      s = block();
                               {if (true) return s;}
      break;
    case FOR:
      s = forEach();
                               {if (true) return s;}
      break;
    default:
      jj_la1[21] = jj_gen;
      if (jj_2_4(2)) {
        s = assignment();
                                            {if (true) return s;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
          s = ifStatement();
                               {if (true) return s;}
          break;
        case WHILE:
          s = whileStatement();
                               {if (true) return s;}
          break;
        default:
          jj_la1[22] = jj_gen;
          if (jj_2_5(2)) {
            s = callStatement();
                                            {if (true) return s;}
          } else if (jj_2_6(2)) {
            s = obj();
                                               {if (true) return s;}
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case RETURN:
              s = returnStatement();
                               {if (true) return s;}
              break;
            case IDENTIFIER:
              s = objFuncWithoutAssignment();
                                     {if (true) return s;}
              break;
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/*
* added by MST
* allows you to call a method in a class without assigning a return value to a variable 
*/
  final public Expression objFuncWithoutAssignment() throws ParseException {
 Expression e;
    e = objFunc();
   {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  final public Block block() throws ParseException {
  List<Statement> ss;
    jj_consume_token(LCURLY);
    ss = statements();
    jj_consume_token(RCURLY);
                                         {if (true) return new Block(ss);}
    throw new Error("Missing return statement in function");
  }

  final public Assignment assignment() throws ParseException {
  Token id ; LValue target;  Expression e;
    id = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      e = expression();
      jj_consume_token(RBRACE);
                                                 target = new ListTupleReference(id, e);
      break;
    default:
      jj_la1[24] = jj_gen;
               target = new Variable(id);
    }
    jj_consume_token(EQUALS);
    e = expression();
    jj_consume_token(SEMI);
        {if (true) return new Assignment(target, e);}
    throw new Error("Missing return statement in function");
  }

  final public Conditional ifStatement() throws ParseException {
  Expression e; Statement sIf = null, sElse = null; Conditional c;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    e = expression();
    jj_consume_token(RPAREN);
    sIf = block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        sElse = ifStatement();
        break;
      case LCURLY:
        sElse = block();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
      {if (true) return new Conditional(e, sIf, sElse);}
    throw new Error("Missing return statement in function");
  }

  final public ForEach forEach() throws ParseException {
  Expression e, listValue; Block b;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    e = expression();
    jj_consume_token(ELEM);
    listValue = expression();
    jj_consume_token(RPAREN);
    b = block();
        Generator g = AbstractSyntax.constructGenerator(e, listValue);
        {if (true) return new ForEach(g, b);}
    throw new Error("Missing return statement in function");
  }

  final public Loop whileStatement() throws ParseException {
  Expression e; Loop l; Block s;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    e = expression();
    jj_consume_token(RPAREN);
    s = block();
     {if (true) return new Loop(e, s);}
    throw new Error("Missing return statement in function");
  }

  final public Expression callStatement() throws ParseException {
  Expression c;
    c = callOrLambda();
    jj_consume_token(SEMI);
                               {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Expression callOrLambda() throws ParseException {
  Token id = null; LambdaDef lambda = null; Expression e; List<Expression> args = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
      args = callArgs();
           {if (true) return new Call(id, args);}
      break;
    case LAMBDA:
      lambda = lambdaDef();
      if (jj_2_7(2)) {
        args = callArgs();
      } else {
        ;
      }
           if (args == null) {
              // This is just a Lambda expression, as a "function pointer"
              {if (true) return lambda;}
           } else {
                  // This is a call to the Lambda function:
                  {if (true) return new Call(lambda, args);}
           }
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<Expression> callArgs() throws ParseException {
  Expression e; List<Expression> args = new ArrayList<Expression>();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LPAREN:
    case LBRACE:
    case MINUS:
    case BANG:
    case LAMBDA:
    case INTEGER:
    case IDENTIFIER:
    case CLFLOAT:
    case CLSTRING:
      e = expression();
                                     args.add(e);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_11;
        }
        jj_consume_token(COMMA);
        e = expression();
                                    args.add(e);
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
        {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

  final public Return returnStatement() throws ParseException {
  Token t; Return rs; Expression e = null;
    t = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LPAREN:
    case LBRACE:
    case MINUS:
    case BANG:
    case LAMBDA:
    case INTEGER:
    case IDENTIFIER:
    case CLFLOAT:
    case CLSTRING:
      e = expression();
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
                                    rs = new Return(t.beginLine, curTopLevelToken.image, e);
    jj_consume_token(SEMI);
                                                                                                        {if (true) return rs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression expression() throws ParseException {
  Expression e1, e2, current = null; Token t; Operator o = Operator.OR;
    e1 = conjunction();
                        current = e1;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR_OP:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_12;
      }
      t = jj_consume_token(OR_OP);
      e2 = conjunction();
                                      current = new Binary(new OpTokenPair(o, t), current, e2);
    }
        {if (true) return current;}
    throw new Error("Missing return statement in function");
  }

  final public LambdaDef lambdaDef() throws ParseException {
 Token id; Token lambda; Expression e; List<Token> paramNames = new ArrayList<Token>();
    lambda = jj_consume_token(LAMBDA);
    id = jj_consume_token(IDENTIFIER);
                               paramNames.add(id);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      id = jj_consume_token(IDENTIFIER);
                                                                                paramNames.add(id);
    }
    jj_consume_token(MAP_TO);
    e = expression();
    jj_consume_token(RPAREN);
                {if (true) return new LambdaDef(lambda.beginLine, paramNames, e);}
    throw new Error("Missing return statement in function");
  }

  final public Expression conjunction() throws ParseException {
  Expression e1, e2, current = null; Token t; Operator o = Operator.AND;
    e1 = equality();
                     current = e1;
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_OP:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_14;
      }
      t = jj_consume_token(AND_OP);
      e2 = equality();
                                    current = new Binary(new OpTokenPair(o, t), current, e2);
    }
        {if (true) return current;}
    throw new Error("Missing return statement in function");
  }

  final public Expression equality() throws ParseException {
  Expression e1, e2, current = null; OpTokenPair o;
    e1 = relation();
                     current = e1;
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ_OP:
      case NE_OP:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_15;
      }
      o = equOp();
      e2 = relation();
                                   current = new Binary(o, current, e2);
    }
        {if (true) return current;}
    throw new Error("Missing return statement in function");
  }

  final public OpTokenPair equOp() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ_OP:
      t = jj_consume_token(EQ_OP);
                  {if (true) return new OpTokenPair(Operator.EQ, t);}
      break;
    case NE_OP:
      t = jj_consume_token(NE_OP);
                  {if (true) return new OpTokenPair(Operator.NE, t);}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression relation() throws ParseException {
  Expression e1, e2, current = null; OpTokenPair o;
    e1 = addition();
                     current = e1;
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LE_OP:
      case GE_OP:
      case LT_OP:
      case GT_OP:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_16;
      }
      o = relOp();
      e2 = addition();
                                   current = new Binary(o, current, e2);
    }
        {if (true) return current;}
    throw new Error("Missing return statement in function");
  }

  final public OpTokenPair relOp() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LT_OP:
      t = jj_consume_token(LT_OP);
                  {if (true) return new OpTokenPair(Operator.LT, t);}
      break;
    case LE_OP:
      t = jj_consume_token(LE_OP);
                  {if (true) return new OpTokenPair(Operator.LE, t);}
      break;
    case GT_OP:
      t = jj_consume_token(GT_OP);
                  {if (true) return new OpTokenPair(Operator.GT, t);}
      break;
    case GE_OP:
      t = jj_consume_token(GE_OP);
                  {if (true) return new OpTokenPair(Operator.GE, t);}
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression addition() throws ParseException {
  Expression e1, e2, current = null; OpTokenPair o;
    e1 = term();
                current = e1;
    label_17:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_17;
      }
      o = addOp();
      e2 = term();
                                           current = new Binary(o, current, e2);
    }
       {if (true) return current;}
    throw new Error("Missing return statement in function");
  }

  final public OpTokenPair addOp() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      t = jj_consume_token(PLUS);
                 {if (true) return new OpTokenPair(Operator.PLUS, t);}
      break;
    case MINUS:
      t = jj_consume_token(MINUS);
                  {if (true) return new OpTokenPair(Operator.MINUS, t);}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression term() throws ParseException {
  Expression e1, e2, current = null; OpTokenPair o;
    e1 = factor();
                  current = e1;
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
      case PRCNT:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_18;
      }
      o = mulOp();
      e2 = factor();
                                current = new Binary(o, current, e2);
    }
       {if (true) return current;}
    throw new Error("Missing return statement in function");
  }

  final public OpTokenPair mulOp() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MULT:
      t = jj_consume_token(MULT);
                  {if (true) return new OpTokenPair(Operator.TIMES, t);}
      break;
    case DIV:
      t = jj_consume_token(DIV);
                  {if (true) return new OpTokenPair(Operator.DIV, t);}
      break;
    case PRCNT:
      t = jj_consume_token(PRCNT);
                  {if (true) return new OpTokenPair(Operator.MOD, t);}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression factor() throws ParseException {
  Expression e; OpTokenPair o = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case BANG:
      o = unaryOp();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    e = primary();
                                    {if (true) return (o == null) ? e : new Unary(o, e);}
    throw new Error("Missing return statement in function");
  }

  final public OpTokenPair unaryOp() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      t = jj_consume_token(MINUS);
                  {if (true) return new OpTokenPair(Operator.NEG, t);}
      break;
    case BANG:
      t = jj_consume_token(BANG);
                  {if (true) return new OpTokenPair(Operator.NOT, t);}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression primary() throws ParseException {
  Expression e; Token t;
    if (jj_2_9(3)) {
      e = callOrLambda();
                                        {if (true) return e;}
    } else if (jj_2_10(3)) {
      e = funcArg();
                                         {if (true) return e;}
    } else if (jj_2_11(3)) {
      e = objFunc();
                                     {if (true) return e;}
    } else if (jj_2_12(2)) {
      e = identifierOrArrayRef();
                                                      {if (true) return e;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case INTEGER:
      case CLFLOAT:
      case CLSTRING:
        e = literal();
                                         {if (true) return e;}
        break;
      default:
        jj_la1[43] = jj_gen;
        if (jj_2_13(2)) {
          t = jj_consume_token(LBRACE);
          jj_consume_token(RBRACE);
                                         {if (true) return ListTupleExpression.emptyList(t.beginLine);}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            e = subExpressionOrTuple();
                                         {if (true) return e;}
            break;
          case LBRACE:
            e = listOrListComprehension();
                                         {if (true) return e;}
            break;
          default:
            jj_la1[44] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

/*
* added by MST
* recognizes a the syntax for first class functions 
*/
  final public Expression funcArg() throws ParseException {
 Token id; Declaration dec = null; List<Declaration> args= new ArrayList<Declaration>();
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INT:
      case FLOAT:
      case BOOL:
      case LIST:
      case TUPLE:
      case OBJECT:
      case STRING:
      case LPAREN:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_19;
      }
      dec = parameter();
                                                       args.add(dec);
    }
    jj_consume_token(RPAREN);
         {if (true) return new FuncArg(id, args);}
    throw new Error("Missing return statement in function");
  }

  final public Expression identifierOrArrayRef() throws ParseException {
 Token id; Expression ref = null;
    id = jj_consume_token(IDENTIFIER);
    if (jj_2_14(2)) {
      jj_consume_token(LBRACE);
      ref = expression();
      jj_consume_token(RBRACE);
    } else {
      ;
    }
                if (ref == null) {
                        {if (true) return new Variable(id);}
                } else {
                        {if (true) return new ListTupleReference(id, ref);}
                }
    throw new Error("Missing return statement in function");
  }

  final public Expression subExpressionOrTuple() throws ParseException {
  Expression e; Token t; List<Expression> expList = new ArrayList<Expression>(); boolean isTuple = false;
    t = jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case LPAREN:
    case LBRACE:
    case MINUS:
    case BANG:
    case LAMBDA:
    case INTEGER:
    case IDENTIFIER:
    case CLFLOAT:
    case CLSTRING:
      e = expression();
                                     expList.add(e);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
                        isTuple = true;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
        case FALSE:
        case LPAREN:
        case LBRACE:
        case MINUS:
        case BANG:
        case LAMBDA:
        case INTEGER:
        case IDENTIFIER:
        case CLFLOAT:
        case CLSTRING:
          e = expression();
                                            expList.add(e);
          label_20:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[46] = jj_gen;
              break label_20;
            }
            jj_consume_token(COMMA);
            e = expression();
                                                     expList.add(e);
          }
          break;
        default:
          jj_la1[47] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
        if (isTuple || expList.size() == 0) {
                // 'expList.size() == 0' account for the case of "()",
                // which shall be treated as an empty tuple.
                {if (true) return new ListTupleExpression(expList, true, t.beginLine);}
        } else {
                {if (true) return expList.get(0);}
        }
    throw new Error("Missing return statement in function");
  }

  final public Expression listOrListComprehension() throws ParseException {
  Expression e; Token t;
  List<Expression> members = new ArrayList<Expression>();
    t = jj_consume_token(LBRACE);
    e = expression();
                                       members.add(e);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACE:
    case COMMA:
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[50] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        e = expression();
                                         members.add(e);
      }
      jj_consume_token(RBRACE);
                                                                        {if (true) return new ListTupleExpression(members, false, t.beginLine);}
      break;
    case PIPE:
      jj_consume_token(PIPE);
      e = finishListComprehension(members.get(0));
      jj_consume_token(RBRACE);
                                                                              {if (true) return e;}
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression finishListComprehension(Expression outFunc) throws ParseException {
        Expression e;
        Expression listValue;
    List<Expression> conditionals = new ArrayList<Expression>();
    List<Generator>  generators   = new ArrayList<Generator>();
    generatorOrConditional(conditionals, generators);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_22;
      }
      jj_consume_token(COMMA);
      generatorOrConditional(conditionals, generators);
    }
          {if (true) return new ListComprehension(outFunc, generators, conditionals);}
    throw new Error("Missing return statement in function");
  }

  final public void generatorOrConditional(List<Expression> conditionals, List<Generator> generators) throws ParseException {
  Expression e, listValue = null;
    e = expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELEM:
      jj_consume_token(ELEM);
      listValue = expression();
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
        if (listValue != null) {
                Generator g = AbstractSyntax.constructGenerator(e, listValue);
                generators.add(g);
        } else {
                conditionals.add(e);
        }
  }

  final public Expression literal() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
                      {if (true) return new IntValue(t);}
      break;
    case TRUE:
      t = jj_consume_token(TRUE);
                      {if (true) return new BoolValue(true, t.beginLine);}
      break;
    case FALSE:
      t = jj_consume_token(FALSE);
                      {if (true) return new BoolValue(false, t.beginLine);}
      break;
    case CLFLOAT:
      t = jj_consume_token(CLFLOAT);
                      {if (true) return new FloatValue(t);}
      break;
    case CLSTRING:
      t = jj_consume_token(CLSTRING);
                      {if (true) return new StringValue(t);}
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(BOOL)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_24()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(CLSTRING)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(CLFLOAT)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(LAMBDA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(MAP_TO)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(MAP_TO)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(OBJECT)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(TUPLE)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(LIST)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_29()) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[55];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x107f800,0x41000000,0x107f800,0x107f800,0x41000000,0x107f800,0x41000000,0x0,0x107b800,0x0,0x107b800,0x0,0x0,0x0,0x0,0x0,0x107f800,0x7b800,0x1000000,0x7b800,0x5127be40,0x5107bc00,0x240,0x200000,0x4000000,0x10000040,0x100,0x0,0x0,0x5180000,0x5180000,0x800000,0x0,0x400000,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x180000,0x5000000,0x107b800,0x0,0x5180000,0x0,0x5180000,0x0,0x8000000,0x0,0x0,0x180000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x880000,0x4020,0x880000,0x0,0x4020,0x0,0x4020,0x4000,0x0,0x4000,0x0,0x20,0x4000,0x20,0x4000,0x20,0x0,0x0,0x0,0x0,0x820000,0x0,0x0,0x800000,0x0,0x0,0x0,0x820000,0x4000,0x3c22100,0x3c22100,0x0,0x4000,0x0,0x1,0x1,0xc6,0xc6,0x300,0x1c00,0x1c00,0x2100,0x2100,0x3400000,0x0,0x0,0x4000,0x3c22100,0x4000,0x3c22100,0x4000,0x4010,0x4000,0x8,0x3400000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 55; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
